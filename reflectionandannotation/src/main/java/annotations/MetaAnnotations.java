package annotations;
/*
Аннотации, применимые к другим аннотациям (мета-аннотации)
Располагаются в пакете java.lang.annotation.

@Retention
Указывает, сколько хранится отмеченная аннотация
RetentionPolicy.SOURCE. Отмеченная аннотация сохраняется только на уровне исходного кода и игнорируется компилятором. (Например, @SuppressWarnings и @Override)
RetentionPolicy.CLASS. Сохраняется компилятором во время компиляции, но игнорируется JVM. (сложно найти пример, чаще в программах обфускаторах, для того чтобы при скрытии класса все равно можно было вызывать методы, например, Class.forName())
RetentionPolicy.RUNTIME. Сохраняется JVM для использования во время выполнения программы. (Например,  @Deprecated)

@Documented
Указывает, что аннотация, должна быть задокументирована в Javadoc (по умолчанию аннотации не документируются).

@Target
Определяет права доступа аннотации (к каким элементам ее можно применять). В аннотации @Target указывается одно из следующих значений:
ElementType.ANNOTATION_TYPE. Применяется к аннотации
ElementType.CONSTRUCTOR. Применяется к конструктору.
ElementType.FIELD. Применяется к полю или свойству.
ElementType.LOCAL_VARIABLE. Применяется к локальной переменной.
ElementType.METHOD. Применяется к методу.
ElementType.PARAMETER. Применяется к параметру метода.
ElementType.TYPE. Применяется к любому элементу класса.

@Inherited
Аннотация будет наследоваться дочерним классом (по умолчанию аннотации не наследуются).
Применима только к описаниям классов.

@Repeatable
Указывает, что аннотация повторяющаяся.

 */

//@Retention(RetentionPolicy.)
public class MetaAnnotations {

}
